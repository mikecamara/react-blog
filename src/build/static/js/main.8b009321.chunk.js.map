{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","pages/article-content.js","components/ArticlesList.js","pages/ArticlesListPage.js","pages/NotFound.js","components/CommentsList.js","components/UpvotesSection.js","components/AddCommentForm.js","pages/ArticlesPage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","AboutPage","articles","name","title","content","ArticlesList","map","key","className","to","substring","ArticlesListPage","articleContent","NotFoundPage","CommentsList","comments","comment","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","console","log","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","row","cols","ArticlesPage","match","params","find","articleInfo","useEffect","fetchData","NotFound","otherArticles","filter","paragraph","NavBar","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQAaeA,EAXE,kBACb,oCACI,2CACA,4CACA,2DACA,oFACA,2ECGOC,EATG,kBACd,oCACI,wCACA,6DACA,kFCiBOC,EAvBE,CACb,CACIC,KAAK,gBACLC,MAAO,aACPC,QAAS,CAAC,oKAAD,kIAOb,CACIF,KAAK,cACLC,MAAO,gBACPC,QAAS,CAAC,mDAAD,kDCAFC,EAXM,SAAC,GAAD,IAAGJ,EAAH,EAAGA,SAAH,OACjB,oCACCA,EAASK,KAAI,SAACL,EAAUM,GAAX,OACV,kBAAC,IAAD,CAAMC,UAAU,oBAAoBD,IAAKA,EAAKE,GAAE,mBAAcR,EAASC,OACnE,4BAAKD,EAASE,OACd,2BAAIF,EAASG,QAAQ,GAAGM,UAAU,EAAE,KAApC,aCKGC,EARU,kBACrB,oCACI,wCACD,kBAAC,EAAD,CAAcV,SAAUW,MCHhBC,EAJM,kBACjB,sD,+BCYWC,EAZM,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACjB,oCACA,yCACCA,EAAST,KAAI,SAACU,EAAST,GAAV,OACV,yBAAKC,UAAU,UAAUD,IAAKA,GAC1B,4BAAKS,EAAQC,UACb,2BAAID,EAAQE,YCWTC,EAjBQ,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,eACrCC,EAAa,uCAAG,8BAAAC,EAAA,sEACGC,MAAM,iBAAD,OAAkBL,EAAlB,WAAwC,CAC9DM,OAAQ,SAFM,cACZC,EADY,gBAICA,EAAOC,OAJR,OAIZC,EAJY,OAKlBC,QAAQC,IAAI,QACZT,EAAeO,GANG,2CAAH,qDAQnB,OACI,yBAAKG,GAAG,mBACJ,4BAAQC,QAAS,kBAAMV,MAAvB,cACA,yDAA+BF,EAA/B,YCwBGa,EApCQ,SAAC,GAAmC,IAAlCd,EAAiC,EAAjCA,YAAaE,EAAoB,EAApBA,eAAoB,EACtBa,mBAAS,IADa,mBAC/ClB,EAD+C,KACrCmB,EADqC,OAEhBD,mBAAS,IAFO,mBAE/CE,EAF+C,KAElCC,EAFkC,KAIhDC,EAAU,uCAAG,8BAAAf,EAAA,sEACMC,MAAM,iBAAD,OAAkBL,EAAlB,gBAA6C,CACnEM,OAAQ,OACRG,KAAMW,KAAKC,UAAU,CAACxB,WAAUC,KAAMmB,IACtCK,QAAS,CACL,eAAgB,sBALT,cACTf,EADS,gBAQIA,EAAOC,OARX,OAQTC,EARS,OASfP,EAAeO,GACfO,EAAY,IACZE,EAAe,IAXA,2CAAH,qDAchB,OACI,yBAAKN,GAAG,oBACJ,8CACA,uCAEI,2BAAOW,KAAK,OAAOC,MAAO3B,EAAU4B,SAAU,SAACC,GAAD,OAAWV,EAAYU,EAAMC,OAAOH,WAEtF,0CAEI,8BAAUI,IAAI,IAAIC,KAAK,KAAKL,MAAOP,EAAaQ,SAAU,SAACC,GAAD,OAAWR,EAAeQ,EAAMC,OAAOH,WAGrG,4BAAQX,QAAS,kBAAMM,MAAvB,iBCYGW,EApCM,SAAC,GAAe,IAC3BhD,EAD0B,EAAZiD,MACDC,OAAOlD,KACpBD,EAAWW,EAAeyC,MAAK,SAAApD,GAAQ,OAAIA,EAASC,OAASA,KAFnC,EAIMiC,mBAAS,CAACd,QAAS,EAAGN,SAAU,KAJtC,mBAIzBuC,EAJyB,KAIZhC,EAJY,KAgBhC,GAVAiC,qBAAU,YACS,uCAAG,8BAAA/B,EAAA,sEACOC,MAAM,iBAAD,OAAkBvB,IAD9B,cACRyB,EADQ,gBAEKA,EAAOC,OAFZ,OAERC,EAFQ,OAGdC,QAAQC,IAAIF,GACZP,EAAeO,GAJD,2CAAH,qDAMf2B,KACD,CAACtD,KAECD,EAAU,OAAO,kBAACwD,EAAD,MAEtB,IAAMC,EAAgB9C,EAAe+C,QAAO,SAAA1D,GAAQ,OAAIA,EAASC,OAASA,KAE1E,OACI,oCACI,4BAAKD,EAASE,OACd,kBAAC,EAAD,CAAgBiB,YAAalB,EAAMmB,QAASiC,EAAYjC,QAASC,eAAgBA,IAChFrB,EAASG,QAAQE,KAAI,SAACsD,EAAWrD,GAAZ,OAClB,uBAAGA,IAAKA,GAAMqD,MAElB,kBAAC,EAAD,CAAc7C,SAAUuC,EAAYvC,WACpC,kBAAC,EAAD,CAAgBK,YAAalB,EAAMoB,eAAgBA,IACnD,+CACA,kBAAC,EAAD,CAAcrB,SAAUyD,MCrBrBG,EAfA,kBACX,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMpD,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,aAAT,gB,MCuBDqD,MArBf,WACE,OACE,kBAAC,IAAD,KACG,yBAAKtD,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKwB,GAAG,aACN,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAO+B,KAAK,IAAIC,UAAWjE,EAAUkE,OAAK,IAC1C,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWhE,IAChC,kBAAC,IAAD,CAAO+D,KAAK,YAAYC,UAAWrD,IACnC,kBAAC,IAAD,CAAOoD,KAAK,iBAAiBC,UAAWd,IACxC,kBAAC,IAAD,CAAOc,UAAWnD,SCbZqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCXNmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.8b009321.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage = () => (\n    <>\n        <h1>Hello there</h1>\n        <p>This is blog.</p>\n        <p>A simple blog made in React.</p>\n        <p>I will write about ramdom things I found interesting.</p>\n        <p>Subscribe and be notified about new posts.</p>\n    </>\n    \n);\n\nexport default HomePage;","import React from 'react';\n\nconst AboutPage = () => (\n    <>\n        <h1>About me</h1>\n        <p>Don't waste your time with me.</p>\n        <p>Go to articles and read about stuff that matters.</p>\n    </>\n    \n);\n\nexport default AboutPage;","const articles = [\n    {\n        name:'encouragement',\n        title: 'Just do it',\n        content: [\n        `There is never a perfect time to make something happen. If you just waiting for the perfect conditions to take place, you might never do it, so, just do it, now.`,\n        `What is your greatest dream? What you would like to wish for the genius in the lamp?`,\n        `Just ask and you get it.`,\n        `Just do it.`\n        ]\n    },\n    {\n        name:'persistence',\n        title: 'Never give up',\n        content: [\n        `You have two options, to give up or keep trying.`,\n        `Just keep trying.`,\n        `Do not give up.`,\n        `Never.`\n        ]\n    },\n];\n\nexport default articles;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ArticlesList = ({ articles }) => (\n    <>\n    {articles.map((articles, key) => (\n        <Link className=\"article-list-item\" key={key} to={`/article/${articles.name}`}>\n            <h3>{articles.title}</h3>\n            <p>{articles.content[0].substring(0,150)}...</p>\n        </Link>\n    ))}\n    </>\n);\n\nexport default ArticlesList;","import React from 'react';\nimport articleContent from './article-content';\n\nimport ArticlesList from '../components/ArticlesList';\n\nconst ArticlesListPage = () => (\n    <>\n        <h1>Articles</h1>\n       <ArticlesList articles={articleContent} />\n    </>\n    \n);\n\nexport default ArticlesListPage;","import React from 'react';\nconst NotFoundPage = () => (\n    <h1> 404: Page Not Found </h1>\n);\n\nexport default NotFoundPage;","import React from 'react';\n\nconst CommentsList = ({comments}) => (\n    <>\n    <h3>Comments:</h3>\n    {comments.map((comment, key) => (\n        <div className=\"comment\" key={key}>\n            <h4>{comment.username}</h4>\n            <p>{comment.text}</p>\n        </div>\n    ))}\n    </>\n);\n\nexport default CommentsList;","import React from 'react';\n\nconst UpvotesSection = ({articleName, upvotes, setArticleInfo}) => {\n    const upvoteArticle = async () => {\n        const result = await fetch(`/api/articles/${articleName}/upvote`, {\n            method: 'post',\n        });\n        const body = await result.json();\n        console.log(\"test\");\n        setArticleInfo(body);\n    }\n    return (\n        <div id=\"upvotes-section\">\n            <button onClick={() => upvoteArticle()}>Add Upvote</button>\n            <p>This post has been upvoted {upvotes} times</p>\n        </div>\n    );\n}\n\nexport default UpvotesSection;","import React, { useState } from 'react';\n\nconst AddCommentForm = ({articleName, setArticleInfo}) => {\n    const [username, setUsername] = useState('');\n    const [commentText, setCommentText] = useState('');\n\n    const addComment = async () => {\n        const result = await fetch(`/api/articles/${articleName}/add-comment`, {\n            method: 'post',\n            body: JSON.stringify({username, text: commentText}),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        })\n        const body = await result.json();\n        setArticleInfo(body);\n        setUsername('');\n        setCommentText('');\n    }\n\n    return(\n        <div id=\"add-comment-form\">\n            <h3> Add a Comment</h3>\n            <label>\n                Name:\n                <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)} />\n            </label>\n            <label>\n                Comment:\n                <textarea row=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)}/>\n            </label>\n           \n            <button onClick={() => addComment()} >Add Comment</button>\n        </div>\n    );    \n}\n    \n\nexport default AddCommentForm;","import React, { useState, useEffect } from 'react';\nimport ArticlesList from '../components/ArticlesList';\nimport CommentsList from '../components/CommentsList';\nimport UpvotesSection from '../components/UpvotesSection';\nimport AddCommentForm from '../components/AddCommentForm';\nimport NotFound from './NotFound';\nimport articleContent from './article-content';\n\nconst ArticlesPage = ({ match }) => {\n    const name = match.params.name;\n    const articles = articleContent.find(articles => articles.name === name);\n    \n    const [articleInfo, setArticleInfo] = useState({upvotes: 0, comments: []});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await fetch(`/api/articles/${name}`);\n            const body = await result.json();\n            console.log(body);\n            setArticleInfo(body);\n        }\n        fetchData();\n    }, [name])\n\n    if (!articles) return <NotFound/>\n\n    const otherArticles = articleContent.filter(articles => articles.name !== name);\n\n    return (\n        <>\n            <h1>{articles.title}</h1>\n            <UpvotesSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo} />\n            {articles.content.map((paragraph, key) => (\n                <p key={key}>{paragraph}</p>\n            ))}\n            <CommentsList comments={articleInfo.comments} />\n            <AddCommentForm articleName={name} setArticleInfo={setArticleInfo} />\n            <h3>Other Articles:</h3>\n            <ArticlesList articles={otherArticles} />\n        </>\n        \n    );\n} \n\nexport default ArticlesPage;","import React from 'react';\nimport {Link} from 'react-router-dom';\nconst NavBar = () => (\n    <nav>\n        <ul>\n            <li>\n                <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n                <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n                <Link to=\"/articles\">Articles</Link>\n            </li>\n        </ul>\n    </nav>\n);\nexport default NavBar;","import React from 'react';\nimport{\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport NotFoundPage from './pages/NotFound';\nimport ArticlesPage from './pages/ArticlesPage';\nimport NavBar from './NavBar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n       <div className=\"App\">\n         <NavBar />\n         <div id=\"page-body\">\n           <Switch>\n              <Route path=\"/\" component={HomePage} exact/>\n              <Route path=\"/about\" component={AboutPage} />\n              <Route path=\"/articles\" component={ArticlesListPage} />\n              <Route path=\"/article/:name\" component={ArticlesPage} />\n              <Route component={NotFoundPage}/>\n           </Switch>\n         </div>\n        \n       </div>\n    </Router>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}